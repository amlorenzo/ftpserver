plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.irg'
version = '0.0.3'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
ext {
	sshdVersion = '2.13.1'
	springfoxVersion = '3.0.0'
	hikariVersion = '5.0.1'
	jetBrainsAnnotationsVersion = '24.1.0'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation "org.apache.sshd:sshd-core:${sshdVersion}"
	implementation "org.apache.sshd:sshd-sftp:${sshdVersion}"
	implementation "io.springfox:springfox-boot-starter:${springfoxVersion}"
	compileOnly 'org.projectlombok:lombok'
	//developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	//Jetbrains annotations
	implementation "org.jetbrains:annotations:${jetBrainsAnnotationsVersion}"

	//DB/Pool dependencies
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'

	//Auth0 Java JWT dependency - Well maintained library
	implementation 'com.auth0:java-jwt:4.2.1'

	//Testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation 'org.mockito:mockito-core'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'ch.qos.logback:logback-classic'
}

tasks.named('test') {
	useJUnitPlatform()
	jvmArgs '-XX:+EnableDynamicAgentLoading','-XX:+EnableDynamicAgentLoading', '-Djdk.instrument.traceUsage'
}

import org.gradle.api.tasks.Delete

def logsDir = file ("${projectDir}/logs")

tasks.register('cleanLogs', Delete) {
	delete logsDir
}

clean.dependsOn(cleanLogs)